#!name=微信防转圈优化版
#!desc=微信防转圈 + 核心 + 重要CDN + 保活脚本
#!version=1.0
#!author=Zf1123

[General]

# ===== Skip First Packet 核心+重要CDN =====
skip-first-packet = weixin.qq.com:443
skip-first-packet = mp.weixin.qq.com:443
skip-first-packet = pay.weixin.qq.com:443
skip-first-packet = qpic.cn:443
skip-first-packet = qlogo.cn:443
skip-first-packet = gtimg.cn:443
skip-first-packet = ugdtimg.com:443
skip-first-packet = file.wx.qq.com:443

[Rule]

# ===== 核心微信直连 =====
DOMAIN,mp.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,weixin.qq.com,DIRECT
DOMAIN-SUFFIX,wx.qq.com,DIRECT
DOMAIN-SUFFIX,wxapp.qq.com,DIRECT
DOMAIN-SUFFIX,voice.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,long.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,short.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,pay.weixin.qq.com,DIRECT

# ===== 重要CDN和文件传输 =====
DOMAIN-SUFFIX,qpic.cn,DIRECT
DOMAIN-SUFFIX,qlogo.cn,DIRECT
DOMAIN-SUFFIX,gtimg.cn,DIRECT
DOMAIN-SUFFIX,ugdtimg.com,DIRECT
DOMAIN-SUFFIX,file.wx.qq.com,DIRECT

[Script]

# 定时保活，每2小时执行一次
cron "0 */2 * * *" script-name=trigger-keepalive.js, timeout=10, tag=微信定时保活

# 即时保活，微信请求触发
http-request
regex=^https?:\/\/(weixin\.qq\.com|mp\.weixin\.qq\.com)\/
script-name=trigger-keepalive.js
timeout=6
tag=微信即时保活

[Script-Content]

#!name=trigger-keepalive.js
const KEEPALIVE_URLS = [
  "https://mp.weixin.qq.com/",
  "https://weixin.qq.com/",
  "https://file.wx.qq.com/"
];
const TIMEOUT = 6000;
const LOG = true;

function httpGet(url) {
  const startTime = Date.now();
  return new Promise(resolve => {
    function logResult(ok, status, error) {
      const elapsed = Date.now() - startTime;
      if (LOG) {
        if (ok) {
          console.log(`[微信保活] 请求成功: ${url} 状态: ${status} 耗时: ${elapsed}ms`);
        } else {
          console.log(`[微信保活] 请求失败: ${url} 状态: ${status || ""} 错误: ${error} 耗时: ${elapsed}ms`);
        }
      }
    }
    if (typeof $task !== "undefined" && $task.fetch) {
      $task.fetch({ url, method: "GET", timeout: TIMEOUT }).then(resp => {
        logResult(resp.statusCode >= 200 && resp.statusCode < 400, resp.statusCode);
        resolve({ ok: resp.statusCode >= 200 && resp.statusCode < 400, status: resp.statusCode });
      }).catch(e => {
        logResult(false, null, e.toString());
        resolve({ ok: false, error: e.toString() });
      });
    } else if (typeof $httpClient !== "undefined") {
      $httpClient.get({ url, timeout: TIMEOUT }, (err, resp) => {
        if (err) {
          logResult(false, null, err.toString());
          resolve({ ok: false, error: err.toString() });
        } else {
          logResult(resp.status >= 200 && resp.status < 400, resp.status);
          resolve({ ok: resp.status >= 200 && resp.status < 400, status: resp.status });
        }
      });
    } else {
      fetch(url, { method: "GET", cache: "no-store", mode: "cors" }).then(resp => {
        logResult(resp.status >= 200 && resp.status < 400, resp.status);
        resolve({ ok: resp.status >= 200 && resp.status < 400, status: resp.status });
      }).catch(e => {
        logResult(false, null, e.toString());
        resolve({ ok: false, error: e.toString() });
      });
    }
  });
}

async function keepAlive(triggerType = "定时") {
  if (LOG) console.log(`[微信保活] 开始执行 (${triggerType})`);
  let successCount = 0;
  for (const url of KEEPALIVE_URLS) {
    const res = await httpGet(url);
    if (res.ok) successCount++;
  }
  if (LOG) console.log(`[微信保活] 执行完成，成功请求数: ${successCount}/${KEEPALIVE_URLS.length}`);
}

const wechatUrlRegex = /^https?:\/\/(weixin\.qq\.com|mp\.weixin\.qq\.com|file\.wx\.qq\.com)\/.+/i;

(async () => {
  if (typeof $request !== "undefined" && $request && $request.url && wechatUrlRegex.test($request.url)) {
    if (LOG) console.log(`[微信即时保活] 触发请求 URL: ${$request.url}`);
    await keepAlive("即时");
    $done({});
  } else {
    await keepAlive("定时");
    if (typeof $done === "function") $done({});
  }
})();
