#!name=微信防转圈保活
#!desc=微信请求触发和定时保活插件
#!version=1.1
#!author=Zf112
[Rule]
# ====== 核心微信直连（防转圈 + 降延迟）======
DOMAIN,mp.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,weixin.qq.com,DIRECT
DOMAIN-SUFFIX,wx.qq.com,DIRECT
DOMAIN-SUFFIX,wxapp.qq.com,DIRECT
DOMAIN-SUFFIX,open.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,res.wx.qq.com,DIRECT

# ====== 消息推送 / 实时通信（低延迟关键）======
# 消息推送
DOMAIN-SUFFIX,long.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,short.weixin.qq.com,DIRECT
# 语音通话
DOMAIN-SUFFIX,voice.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,wxavs.qq.com,DIRECT
# 视频通话/直播
DOMAIN-SUFFIX,webrtc.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,liveplay.myqcloud.com,DIRECT
DOMAIN-SUFFIX,liveplay.video.qq.com,DIRECT
# UDP 直连（腾讯云）
DOMAIN-SUFFIX,qcloud.com,DIRECT
DOMAIN-SUFFIX,myqcloud.com,DIRECT

# ====== 公众号文章 / 图片 / 视频 CDN ======
DOMAIN-SUFFIX,mmbiz.qpic.cn,DIRECT
DOMAIN-SUFFIX,mpvideo.qpic.cn,DIRECT
DOMAIN-SUFFIX,mp-weixin-qq-com.a.bdydns.com,DIRECT
DOMAIN-SUFFIX,vweixinf.tc.qq.com,DIRECT
DOMAIN-SUFFIX,ugc.v.qq.com,DIRECT

# ====== 头像 / 静态资源 ======
DOMAIN-SUFFIX,qlogo.cn,DIRECT
DOMAIN-SUFFIX,wx.qlogo.cn,DIRECT
DOMAIN-SUFFIX,qpic.cn,DIRECT
DOMAIN-SUFFIX,apd-pcdnwxapp.qpic.cn,DIRECT

# ====== 小程序 / 支付 ======
DOMAIN-SUFFIX,servicewechat.com,DIRECT
DOMAIN-SUFFIX,tenpay.com,DIRECT
DOMAIN-SUFFIX,tenpayimg.com,DIRECT
DOMAIN-SUFFIX,wxsnsdy.wxs.qq.com,DIRECT

# ====== 文件传输 ======
DOMAIN-SUFFIX,file.wx.qq.com,DIRECT
DOMAIN-SUFFIX,wework.qpic.cn,DIRECT

# ====== 短链 ======
DOMAIN-SUFFIX,mmbizurl.cn,DIRECT

# ====== 腾讯通用 CDN ======
DOMAIN-SUFFIX,ugdtimg.com,DIRECT
DOMAIN-SUFFIX,gtimg.cn,DIRECT

# 微信官方域名
DOMAIN-SUFFIX,weixin.qq.com,DIRECT
DOMAIN-SUFFIX,mp.weixin.qq.com,DIRECT
DOMAIN-SUFFIX,res.wx.qq.com,DIRECT
DOMAIN-SUFFIX,wechat.com,DIRECT
DOMAIN-SUFFIX,weixin110.qq.com,DIRECT
DOMAIN-SUFFIX,qq.com,DIRECT

# 微信相关 IP 段（示例，请根据实际情况调整）
IP-CIDR,14.17.0.0/16,DIRECT
IP-CIDR,183.60.0.0/16,DIRECT
IP-CIDR,111.13.0.0/16,DIRECT
IP-CIDR,123.125.0.0/16,DIRECT

# 你可以根据需要添加更多规则
[MITM]
# 排除所有微信实时通信和核心域名，避免解密延迟
hostname = -mp.weixin.qq.com, -*.weixin.qq.com, -*.wx.qq.com, -*.wxapp.qq.com, -open.weixin.qq.com, -res.wx.qq.com, -*.mmbiz.qpic.cn, -*.mpvideo.qpic.cn, -*.vweixinf.tc.qq.com, -*.qlogo.cn, -*.qpic.cn, -*.tenpay.com, -*.tenpayimg.com, -*.long.weixin.qq.com, -*.short.weixin.qq.com, -*.voice.weixin.qq.com, -*.wxavs.qq.com, -*.webrtc.weixin.qq.com, -*.myqcloud.com
skip-server-cert-verify = true

# ====== 使用建议 ======
# 1. 插件放在规则最前面，保证优先匹配。
# 2. 保证这些域名不走代理（DIRECT），减少网络跳数。
# 3. 移除 MITM 对实时通信域名的解密，减少延迟和 CPU 占用。
# 4. 建议在 Loon -> Setting -> General 里保持 Wi-Fi/蜂窝网络直连低延迟路由。

[Script]
# 定时每5分钟执行一次
cron "0 */2 * * *" script-name=trigger-keepalive.js, timeout=10, tag=微信定时保活
# 微信请求匹配时即时触发
http-request
regex=^https?:\/\/(weixin\.qq\.com|mp\.weixin\.qq\.com)\/
script-name=trigger-keepalive.js
timeout=6
tag=微信即时保活

[Script-Content]
#!name=trigger-keepalive.js
const KEEPALIVE_URLS = [
  "https://mp.weixin.qq.com/",
  "https://weixin.qq.com/",
  "https://res.wx.qq.com/zh_CN/htmledition/js/wxLogin.js"
];
const TIMEOUT = 6000;
const LOG = true;  // true 开启日志，false 关闭日志

function httpGet(url) {
  const startTime = Date.now();
  return new Promise(resolve => {
    function logResult(ok, status, error) {
      const elapsed = Date.now() - startTime;
      if (LOG) {
        if (ok) {
          console.log(`[微信保活] 请求成功: ${url} 状态: ${status} 耗时: ${elapsed}ms`);
        } else {
          console.log(`[微信保活] 请求失败: ${url} 状态: ${status || ""} 错误: ${error} 耗时: ${elapsed}ms`);
        }
      }
    }
    if (typeof $task !== "undefined" && $task.fetch) {
      $task.fetch({ url, method: "GET", timeout: TIMEOUT }).then(resp => {
        logResult(resp.statusCode >= 200 && resp.statusCode < 400, resp.statusCode);
        resolve({ ok: resp.statusCode >= 200 && resp.statusCode < 400, status: resp.statusCode });
      }).catch(e => {
        logResult(false, null, e.toString());
        resolve({ ok: false, error: e.toString() });
      });
    } else if (typeof $httpClient !== "undefined") {
      $httpClient.get({ url, timeout: TIMEOUT }, (err, resp) => {
        if (err) {
          logResult(false, null, err.toString());
          resolve({ ok: false, error: err.toString() });
        } else {
          logResult(resp.status >= 200 && resp.status < 400, resp.status);
          resolve({ ok: resp.status >= 200 && resp.status < 400, status: resp.status });
        }
      });
    } else {
      fetch(url, { method: "GET", cache: "no-store", mode: "cors" }).then(resp => {
        logResult(resp.status >= 200 && resp.status < 400, resp.status);
        resolve({ ok: resp.status >= 200 && resp.status < 400, status: resp.status });
      }).catch(e => {
        logResult(false, null, e.toString());
        resolve({ ok: false, error: e.toString() });
      });
    }
  });
}

async function keepAlive(triggerType = "定时") {
  if (LOG) console.log(`[微信保活] 开始执行 (${triggerType})`);
  let successCount = 0;
  for (const url of KEEPALIVE_URLS) {
    const res = await httpGet(url);
    if (res.ok) successCount++;
  }
  if (LOG) console.log(`[微信保活] 执行完成，成功请求数: ${successCount}/${KEEPALIVE_URLS.length}`);
}

const wechatUrlRegex = /^https?:\/\/(weixin\.qq\.com|mp\.weixin\.qq\.com)\/.+/i;

(async () => {
  if (typeof $request !== "undefined" && $request && $request.url && wechatUrlRegex.test($request.url)) {
    if (LOG) console.log(`[微信即时保活] 触发请求 URL: ${$request.url}`);
    await keepAlive("即时");
    $done({});
  } else {
    await keepAlive("定时");
    if (typeof $done === "function") $done({});
  }
})();
